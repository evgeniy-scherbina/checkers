// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: biggernum/games.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Games struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Player1      string `protobuf:"bytes,2,opt,name=player1,proto3" json:"player1,omitempty"`
	Player2      string `protobuf:"bytes,3,opt,name=player2,proto3" json:"player2,omitempty"`
	Move1        uint64 `protobuf:"varint,4,opt,name=move1,proto3" json:"move1,omitempty"`
	Move2        uint64 `protobuf:"varint,5,opt,name=move2,proto3" json:"move2,omitempty"`
	PlayerToMove uint64 `protobuf:"varint,6,opt,name=playerToMove,proto3" json:"playerToMove,omitempty"`
	Winner       string `protobuf:"bytes,7,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (m *Games) Reset()         { *m = Games{} }
func (m *Games) String() string { return proto.CompactTextString(m) }
func (*Games) ProtoMessage()    {}
func (*Games) Descriptor() ([]byte, []int) {
	return fileDescriptor_9939b6db15d87cd6, []int{0}
}
func (m *Games) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Games) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Games.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Games) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Games.Merge(m, src)
}
func (m *Games) XXX_Size() int {
	return m.Size()
}
func (m *Games) XXX_DiscardUnknown() {
	xxx_messageInfo_Games.DiscardUnknown(m)
}

var xxx_messageInfo_Games proto.InternalMessageInfo

func (m *Games) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Games) GetPlayer1() string {
	if m != nil {
		return m.Player1
	}
	return ""
}

func (m *Games) GetPlayer2() string {
	if m != nil {
		return m.Player2
	}
	return ""
}

func (m *Games) GetMove1() uint64 {
	if m != nil {
		return m.Move1
	}
	return 0
}

func (m *Games) GetMove2() uint64 {
	if m != nil {
		return m.Move2
	}
	return 0
}

func (m *Games) GetPlayerToMove() uint64 {
	if m != nil {
		return m.PlayerToMove
	}
	return 0
}

func (m *Games) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func init() {
	proto.RegisterType((*Games)(nil), "alice.checkers.biggernum.Games")
}

func init() { proto.RegisterFile("biggernum/games.proto", fileDescriptor_9939b6db15d87cd6) }

var fileDescriptor_9939b6db15d87cd6 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xca, 0x4c, 0x4f,
	0x4f, 0x2d, 0xca, 0x2b, 0xcd, 0xd5, 0x4f, 0x4f, 0xcc, 0x4d, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x92, 0x48, 0xcc, 0xc9, 0x4c, 0x4e, 0xd5, 0x4b, 0xce, 0x48, 0x4d, 0xce, 0x4e, 0x2d,
	0x2a, 0xd6, 0x83, 0xab, 0x52, 0xda, 0xc9, 0xc8, 0xc5, 0xea, 0x0e, 0x52, 0x29, 0x24, 0xc2, 0xc5,
	0x9a, 0x99, 0x97, 0x92, 0x5a, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe1, 0x08, 0x49,
	0x70, 0xb1, 0x17, 0xe4, 0x24, 0x56, 0xa6, 0x16, 0x19, 0x4a, 0x30, 0x81, 0xc5, 0x61, 0x5c, 0x84,
	0x8c, 0x91, 0x04, 0x33, 0xb2, 0x8c, 0x11, 0xc8, 0xa4, 0xdc, 0xfc, 0xb2, 0x54, 0x43, 0x09, 0x16,
	0x05, 0x46, 0x0d, 0x96, 0x20, 0x08, 0x07, 0x26, 0x6a, 0x24, 0xc1, 0x8a, 0x10, 0x35, 0x12, 0x52,
	0xe2, 0xe2, 0x81, 0x68, 0x0b, 0xc9, 0xf7, 0xcd, 0x2f, 0x4b, 0x95, 0x60, 0x03, 0x4b, 0xa2, 0x88,
	0x09, 0x89, 0x71, 0xb1, 0x95, 0x67, 0xe6, 0xe5, 0xa5, 0x16, 0x49, 0xb0, 0x83, 0x2d, 0x82, 0xf2,
	0x9c, 0x5c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09,
	0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x3b, 0x3d, 0xb3,
	0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xec, 0x75, 0x7d, 0x98, 0xd7, 0xf5, 0x2b,
	0xf4, 0x11, 0x41, 0x54, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x23, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x4e, 0x0b, 0x76, 0xe6, 0x3c, 0x01, 0x00, 0x00,
}

func (m *Games) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Games) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Games) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x3a
	}
	if m.PlayerToMove != 0 {
		i = encodeVarintGames(dAtA, i, uint64(m.PlayerToMove))
		i--
		dAtA[i] = 0x30
	}
	if m.Move2 != 0 {
		i = encodeVarintGames(dAtA, i, uint64(m.Move2))
		i--
		dAtA[i] = 0x28
	}
	if m.Move1 != 0 {
		i = encodeVarintGames(dAtA, i, uint64(m.Move1))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Player2) > 0 {
		i -= len(m.Player2)
		copy(dAtA[i:], m.Player2)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Player2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Player1) > 0 {
		i -= len(m.Player1)
		copy(dAtA[i:], m.Player1)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Player1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGames(dAtA []byte, offset int, v uint64) int {
	offset -= sovGames(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Games) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.Player1)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.Player2)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	if m.Move1 != 0 {
		n += 1 + sovGames(uint64(m.Move1))
	}
	if m.Move2 != 0 {
		n += 1 + sovGames(uint64(m.Move2))
	}
	if m.PlayerToMove != 0 {
		n += 1 + sovGames(uint64(m.PlayerToMove))
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	return n
}

func sovGames(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGames(x uint64) (n int) {
	return sovGames(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Games) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGames
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Games: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Games: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move1", wireType)
			}
			m.Move1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Move1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move2", wireType)
			}
			m.Move2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Move2 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerToMove", wireType)
			}
			m.PlayerToMove = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerToMove |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGames(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGames
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGames(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGames
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGames
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGames
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGames
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGames        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGames          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGames = fmt.Errorf("proto: unexpected end of group")
)
